## <NAME>
## 
## DESCRIPTION
## 
## Rules
## -----
##

# rule all:
#
rule all:
  input:
    expand("results/output/{number}.txt", number = range(1, 10))



rule fastqc:
  conda: "envs/qc.yml"
  input: expand("data/data/{seqname}.fastq.gz", seqname=glob_wildcards("data/data/{seqname}.fastq.gz").seqname)
  output: directory("results/quality-control/fastqc")
  shell: "mkdir {output}; fastqc {input} -o {output}"

rule multiqc:
  conda: "envs/qc.yml"
  input: rules.fastqc.output
  output: directory("results/quality-control/multiqc")
  shell: "multiqc {input} -o {output}"

## help:
##    Show the help.
##
rule help:
  input: "workflow/Snakefile"
  shell: "sed -n 's/^##//p' {input}"

## clean:                     
##    Clean all outputs from the results folder.
##
rule clean:
  shell: "rm -rf results/*"

## build_overview:            
##    Print the directed acyclic graph.
##
rule build_overview:
  output:
    "results/method.{fileformat}"
  shell:
    """
    snakemake -c 1 --forceall --dag | dot -T{wildcards.fileformat} > {output}
    """

rule install_easy_graph:
  conda:
    "envs/utils.yml"
  output:
    touch("results/checkpoints/install_easy_graph")
  shell:
    """
    echo "Installing easy graph"
    cpan -i App::cpanminus
    cpanm Graph::Easy
    """

## build_overview_ascii:
##    Prints the graph in ascii format.
rule build_ascii_graph:
  conda:
    "envs/utils.yml"
  input:
    "results/checkpoints/install_easy_graph"
  output:
    "results/method-simple.ascii"
  shell:
    """
    snakemake -c 1 --forceall --dag > out
    graph-easy --from=dot --as_ascii out >  {output}
    rm out
    """
