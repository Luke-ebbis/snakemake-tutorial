## <NAME>
## 
## DESCRIPTION
## 
## Rules
## -----
##

inputs=glob_wildcards("data/data/{seqname}_{direction}.fastq.gz")
DIRECTIONS = set(inputs.direction)
SEQNAMES= set(inputs.seqname)

rule all:
  input:
    expand("results/data/{seqname}_{direction}.trimmed.fastq.gz", seqname=SEQNAMES, direction=DIRECTIONS)
#
# TODO

rule fastqc:
  conda: "envs/qc.yml"
  input: expand("data/data/{seqname}_{direction}.fastq.gz", seqname=SEQNAMES, direction=DIRECTIONS)
  output: directory("results/quality-control/fastqc")
  shell: "mkdir {output}; fastqc {input} -o {output}"

rule fastqc_report:
  conda: "envs/qc.yml"
  input: rules.fastqc.output
  output: directory("results/quality-control/multiqc")
  shell: "multiqc {input} -o {output}"

rule trimming:
  conda: "envs/qc.yml"
  input:
    P1="data/data/{seqname}_R1.fastq.gz",
    P2="data/data/{seqname}_R2.fastq.gz"
  output:
    P1="results/data/{seqname}_R1.trimmed.fastq.gz",
    P2="results/data/{seqname}_R2.trimmed.fastq.gz",
    html_report="results/quality-control/trimmed/{seqname}.html",
    json_report="results/quality-control/trimmed/{seqname}.json"
  shell:
    """
    fastp --detect_adapter_for_pe \
      --overrepresentation_analysis \
      --correction \
      --cut_right \
      --thread 2 \
      --html {output.html_report} \
      --json {output.json_report} \
      -i {input.P1}  -I {input.P2} \
      -o {output.P1} -O {output.P2}
    """

## help:
##    Show the help.
##
rule help:
  input: "workflow/Snakefile"
  shell: "sed -n 's/^##//p' {input}"

## clean:
##    Clean all outputs from the results folder.
##
rule clean:
  shell: "rm -rf results/*"

## build_overview:
##    Print the directed acyclic graph.
##
rule build_overview:
  output:
    "results/method.{fileformat}"
  shell:
    """
    snakemake -c 1 --forceall --dag | dot -T{wildcards.fileformat} > {output}
    """

rule install_easy_graph:
  conda:
    "envs/utils.yml"
  output:
    touch("results/checkpoints/install_easy_graph")
  shell:
    """
    echo "Installing easy graph"
    cpan -i App::cpanminus
    cpanm Graph::Easy
    """

## build_overview_ascii:
##    Prints the graph in ascii format.
rule build_ascii_graph:
  conda:
    "envs/utils.yml"
  input:
    "results/checkpoints/install_easy_graph"
  output:
    "results/method-simple.ascii"
  shell:
    """
    snakemake -c 1 --forceall --dag > out
    graph-easy --from=dot --as_ascii out >  {output}
    rm out
    """
